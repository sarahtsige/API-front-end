{"version":3,"sources":["components/Countries.js","util.js","components/Header.js","components/CountryDetails.js","components/Home.js","components/Regions.js","components/CreateCountry.js","App.js","serviceWorker.js","index.js"],"names":["Countries","props","state","data","fetch","then","response","json","setState","countries","this","map","item","className","key","id","Card","style","width","backgroundImage","flag","Body","Title","name","Text","capital","to","Button","variant","Component","Header","Navbar","bg","Brand","href","Nav","countryUrl","CountryDetails","displayAsylum","asylum","Origin","CountryOfAsylumOrResidence","year","total","console","log","match","params","country","url","setCountryDetails","catch","err","error","details","region","population","demonym","asylumInfo","as","src","alt","propType","PropTypes","object","func","Home","Jumbotron","Regions","getRegionData","e","regionName","target","Url","regionUrl","DropdownButton","onClick","title","Dropdown","Item","CreateCountry","onChange","val","value","submitHandler","preventDefault","axios","post","Form","onSubmit","Group","controlId","Label","Control","type","placeholder","App","exact","path","component","render","routerProps","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a7d4d569.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport getCountryAPI from '../util';\n\nclass Countries extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(getCountryAPI())\n      .then(response => {\n        return response.json();\n      })\n      .then(data => {\n        this.setState({ data: data });\n      });\n  }\n\n  render() {\n    let countries = this.state.data.map(item => {\n      return (\n        <div className=\"country\" key={item.id}>\n          <Card style={{ width: \"18rem\" }} >\n            <div className=\"flag\"  style={{ backgroundImage: `url(${item.flag})`}}></div>\n            <Card.Body>\n              <Card.Title className=\"cardTitle\">{item.name}</Card.Title>\n              <Card.Text className=\"cardText\" >Capital: {item.capital}</Card.Text>\n              <Link to={\"country-details/\" + item.name}>\n                <Button className=\"countryInfoButton\" variant=\"primary\">Country Info</Button>\n              </Link>\n            </Card.Body>\n          </Card>\n        </div>\n      );\n    });\n    return <div className=\"countryContainer\">{countries}</div>;\n  }\n}\n\nexport default Countries;\n","\nconst API_HOST_LOCAL = \"http://localhost:4000/\";\nconst API_HOST = \"https://api-projectssaleh.herokuapp.com/\";\n\nexport default function getCountryAPI () {\n    if(process.env.NODE_ENV === 'production')\n        return API_HOST;\n    else\n        return API_HOST_LOCAL;\n}","import React, { Component } from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport { Link } from \"react-router-dom\";\nimport Button from \"react-bootstrap/Button\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <Navbar bg=\"primary\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">Country API</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n          <Link to=\"/home\">\n            <Button>Home</Button>\n          </Link>\n          <Link to=\"/countries\">\n            <Button>Countries</Button>\n          </Link>\n          <Link to=\"/regions\">\n            <Button>Regions</Button>\n          </Link>\n          <Link to=\"/create\">\n            <Button>Create</Button>\n          </Link>\n        </Nav>\n      </Navbar>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Card from \"react-bootstrap/Card\";\nimport getCountryAPI from '../util';\n\n// import axios from \"axios\";\nimport \"./Countries\";\n\nlet countryUrl = `${getCountryAPI()}name/`;\n\n\nclass CountryDetails extends Component {\n  constructor(props) {\n    super(props);\n    console.log(props.match.params.name);\n  }\n\n  componentDidMount() {\n    const country = this.props.match.params.name;\n    const url = `${countryUrl}${country}`;\n    fetch(url)\n      .then(response => response.json())\n      .then(response => {\n        this.props.setCountryDetails(response[0]);\n      })\n      .catch(err => {\n        console.error(err);\n      });\n  }\n\n  displayAsylum = asylum => {\n    return (\n      // asylum &&\n      asylum.map(item => {\n        return (\n          <div className=\"asylum\">\n            <p> Origin: {item.Origin}</p>\n            <p>\n              Country of Asylum or Residence: {item.CountryOfAsylumOrResidence}\n            </p>\n            <p> Year: {item.year}</p>\n            <p> Total: {item.total}</p>\n          </div>\n        );\n      })\n    );\n  };\n\n  render() {\n    const {\n      name,\n      capital,\n      region,\n      population,\n      demonym,\n      flag,\n      asylum\n    } = this.props.details;\n    const asylumInfo = asylum && this.displayAsylum(asylum);\n    console.log(asylumInfo);\n    return (\n      <div>\n        <Card>\n          <Card.Header as=\"h4\">{name}</Card.Header>\n          <Card.Body>\n            <Card.Title>Capital City: {capital}</Card.Title>\n            <p>Region: {region}</p>\n            <p>Population: {population}</p>\n            <p>Demonym: {demonym}</p>\n            <p>Flag: </p>\n            <img src={flag} alt=\"flag\"/>\n          </Card.Body>\n        </Card>\n        <h3>Asylum Information:</h3>\n        <div className=\"asylumInfo\">\n        {asylumInfo}\n        </div>\n      </div>\n    );\n  }\n}\n\nCountryDetails.propType = {\n  match: PropTypes.object,\n  details: PropTypes.object,\n  setCountryDetails: PropTypes.func\n};\n\nexport default CountryDetails;\n","import React from \"react\";\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Button from \"react-bootstrap/Button\";\nimport { Link } from \"react-router-dom\";\n\nfunction Home(props) {\n  return (\n    <Jumbotron className=\"jumbotron\">\n      <h1 className=\"homeTitle\">Country API</h1>\n      <p className=\"homeText\">\n        To view country data, click on of the links above or click below to see\n        all countries.\n      </p>\n      <p>\n        <Link to=\"/countries\">\n          <Button variant=\"primary\">See All Countries</Button>\n        </Link>\n      </p>\n    </Jumbotron>\n  );\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\nimport {Link} from \"react-router-dom\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport getCountryAPI from \"../util\"\n\n\n\n\nclass Regions extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n  }\n\n  getRegionData = e => {\n    let regionName = e.target.id;\n    let Url =  `${getCountryAPI()}region/`;\n    let regionUrl = `${Url}${regionName}`;\n    fetch(regionUrl)\n      .then(response => {\n        return response.json();\n      })\n      .then(data => {\n        this.setState({ data: data });\n      });\n  };\n\n  render() {\n    let countries = this.state.data.map(item => {\n      return (\n        <div className=\"region\" key={item.name}>\n          <Card style={{ width: \"18rem\" }}>\n            <div className=\"flag\" style={{backgroundImage: `url(${item.flag})`}}></div>\n            <Card.Body>\n              <Card.Title>{item.name}</Card.Title>\n              <Card.Text>Capital: {item.capital}</Card.Text>\n              <Link to={\"country-details/\" + item.name}>\n                <Button variant=\"primary\">Country Info</Button>\n              </Link>\n            </Card.Body>\n          </Card>\n        </div>\n      );\n    });\n    return (\n      <div>\n        <DropdownButton\n          id=\"dropdown-basic-button\"\n          onClick={this.getRegionData}\n          title=\"Regions\"\n        >\n          <Dropdown.Item id=\"Africa\" href=\"#/action-1\">\n            Africa\n          </Dropdown.Item>\n          <Dropdown.Item id=\"Americas\" href=\"#/action-2\">\n            Americas\n          </Dropdown.Item>\n          <Dropdown.Item id=\"Asia\" href=\"#/action-3\">\n            Asia\n          </Dropdown.Item>\n          <Dropdown.Item id=\"Europe\" href=\"#/action-4\">\n            Europe\n          </Dropdown.Item>\n          <Dropdown.Item id=\"Oceania\" href=\"#/action-5\">\n            Oceania\n          </Dropdown.Item>\n          <Dropdown.Item id=\"Polar\" href=\"#/action-6\">\n            Polar\n          </Dropdown.Item>\n        </DropdownButton>\n        <div className=\"countryContainer\">{countries}</div>\n      </div>\n    );\n  }\n}\n\nexport default Regions;\n","import React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport getCountryAPI from \"../util\";\nimport axios from \"axios\";\n\n\nclass CreateCountry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"\",\n      capital: \"\",\n      region: \"\",\n      population: 0,\n      demonym: \"\"\n    };\n  }\n\n  onChange = e => {\n    const val = e.target.value;\n    console.log(val);\n    this.setState({\n      [e.target.name]: val\n    });\n  };\n\n  submitHandler = e => {\n    e.preventDefault();\n    console.log(this.state);\n    axios\n      .post(getCountryAPI(), {\n        name: this.state.name,\n        capital: this.state.capital,\n        region: this.state.region,\n        population: this.state.population,\n        demonym: this.state.demonym\n      })\n      .then(function(response) {\n        console.log(response);\n      });\n  };\n\n  render() {\n    return (\n      <Form className=\"countryForm\" onSubmit={this.submitHandler}>\n        <Form.Group controlId=\"countryName\">\n          <Form.Label>Country Name</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Country Name\"\n            value={this.state.name}\n            onChange={this.onChange}\n          />\n          <Form.Text className=\"text-muted\">\n            First letters should be capitalized.\n          </Form.Text>\n        </Form.Group>\n\n        <Form.Group controlId=\"capital\">\n          <Form.Label>Capital</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"capital\"\n            placeholder=\"Capital\"\n            value={this.state.capital}\n            onChange={this.onChange}\n          />\n        </Form.Group>\n\n        <Form.Group controlId=\"region\">\n          <Form.Label>Region</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"region\"\n            placeholder=\"Region\"\n            value={this.state.region}\n            onChange={this.onChange}\n          />\n        </Form.Group>\n\n        <Form.Group controlId=\"population\">\n          <Form.Label>Population</Form.Label>\n          <Form.Control\n            type=\"number\"\n            name=\"population\"\n            placeholder=\"Population\"\n            value={this.state.population}\n            onChange={this.onChange}\n          />\n        </Form.Group>\n\n        <Form.Group controlId=\"demonym\">\n          <Form.Label>Demonym</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"demonym\"\n            placeholder=\"Demonym\"\n            value={this.state.demonym}\n            onChange={this.onChange}\n          />\n        </Form.Group>\n\n        <Button variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    );\n  }\n}\n\nexport default CreateCountry;\n","import React, { Component } from \"react\";\nimport { Route} from \"react-router-dom\";\nimport \"./App.css\";\nimport Countries from \"./components/Countries\";\nimport Header from \"./components/Header\";\nimport CountryDetails from \"./components/CountryDetails\";\nimport Home from \"./components/Home\";\nimport Regions from \"./components/Regions\";\nimport CreateCountry from \"./components/CreateCountry\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { details: {} };\n  }\n\n  setCountryDetails = details => {\n    this.setState({ details: details });\n  };\n\n  render() {\n    return (\n      <div>\n        <nav>\n          <Header />\n        </nav>\n        <main>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/countries\" component={Countries} />\n          <Route path=\"/regions\" component={Regions} />\n          <Route path=\"/create\" component={CreateCountry} />\n          <Route\n            path=\"/country-details/:name\"\n            render={routerProps => (\n              <CountryDetails\n                setCountryDetails={this.setCountryDetails}\n                {...routerProps}\n                {...this.state}\n              />\n            )}\n          />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// ReactDOM.render(<App />, document.getElementById('root'));\n\nReactDOM.render(\n    <Router>\n      <App />\n    </Router>,\n    document.getElementById(\"root\")\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}